nimTitle	fonts	pixie/fonts.html	module src/pixie/fonts		0
nim	autoLineHeight	pixie/fonts.html#autoLineHeight	const autoLineHeight		6
nim	Typeface	pixie/fonts.html#Typeface	type Typeface		11
nim	Font	pixie/fonts.html#Font	type Font		17
nim	Span	pixie/fonts.html#Span	type Span		27
nim	Arrangement	pixie/fonts.html#Arrangement	type Arrangement		31
nim	LeftAlign	pixie/fonts.html#LeftAlign	HorizontalAlignment.LeftAlign		39
nim	CenterAlign	pixie/fonts.html#CenterAlign	HorizontalAlignment.CenterAlign		39
nim	RightAlign	pixie/fonts.html#RightAlign	HorizontalAlignment.RightAlign		39
nim	HorizontalAlignment	pixie/fonts.html#HorizontalAlignment	enum HorizontalAlignment		39
nim	TopAlign	pixie/fonts.html#TopAlign	VerticalAlignment.TopAlign		44
nim	MiddleAlign	pixie/fonts.html#MiddleAlign	VerticalAlignment.MiddleAlign		44
nim	BottomAlign	pixie/fonts.html#BottomAlign	VerticalAlignment.BottomAlign		44
nim	VerticalAlignment	pixie/fonts.html#VerticalAlignment	enum VerticalAlignment		44
nim	NormalCase	pixie/fonts.html#NormalCase	TextCase.NormalCase		49
nim	UpperCase	pixie/fonts.html#UpperCase	TextCase.UpperCase		49
nim	LowerCase	pixie/fonts.html#LowerCase	TextCase.LowerCase		49
nim	TitleCase	pixie/fonts.html#TitleCase	TextCase.TitleCase		49
nim	TextCase	pixie/fonts.html#TextCase	enum TextCase		49
nim	scale	pixie/fonts.html#scale,Typeface	proc scale(typeface: Typeface): float32		57
nim	ascent	pixie/fonts.html#ascent,Typeface	proc ascent(typeface: Typeface): float32		64
nim	descent	pixie/fonts.html#descent,Typeface	proc descent(typeface: Typeface): float32		71
nim	lineGap	pixie/fonts.html#lineGap,Typeface	proc lineGap(typeface: Typeface): float32		78
nim	lineHeight	pixie/fonts.html#lineHeight,Typeface	proc lineHeight(typeface: Typeface): float32		83
nim	capHeight	pixie/fonts.html#capHeight,Typeface	proc capHeight(typeface: Typeface): float32		88
nim	hasGlyph	pixie/fonts.html#hasGlyph,Typeface,Rune	proc hasGlyph(typeface: Typeface; rune: Rune): bool		114
nim	fallbackTypeface	pixie/fonts.html#fallbackTypeface,Typeface,Rune	proc fallbackTypeface(typeface: Typeface; rune: Rune): Typeface		121
nim	getGlyphPath	pixie/fonts.html#getGlyphPath,Typeface,Rune	proc getGlyphPath(typeface: Typeface; rune: Rune): Path		130
nim	getAdvance	pixie/fonts.html#getAdvance,Typeface,Rune	proc getAdvance(typeface: Typeface; rune: Rune): float32		150
nim	getKerningAdjustment	pixie/fonts.html#getKerningAdjustment,Typeface,Rune,Rune	proc getKerningAdjustment(typeface: Typeface; left, right: Rune): float32		165
nim	scale	pixie/fonts.html#scale,Font	proc scale(font: Font): float32		185
nim	defaultLineHeight	pixie/fonts.html#defaultLineHeight,Font	proc defaultLineHeight(font: Font): float32		189
nim	paint	pixie/fonts.html#paint,Font	proc paint(font: Font): Paint		207
nim	paint=	pixie/fonts.html#paint=,Font,Paint	proc paint=(font: Font; paint: Paint)		210
nim	newFont	pixie/fonts.html#newFont,Typeface	proc newFont(typeface: Typeface): Font		213
nim	copy	pixie/fonts.html#copy,Font	proc copy(font: Font): Font		221
nim	newSpan	pixie/fonts.html#newSpan,sinkstring,Font	proc newSpan(text: sink string; font: Font): Span		232
nim	typeset	pixie/fonts.html#typeset,openArray[Span]	proc typeset(spans: openArray[Span]; bounds = vec2(0, 0); hAlign = LeftAlign;\n        vAlign = TopAlign; wrap = true): Arrangement		256
nim	typeset	pixie/fonts.html#typeset,Font,sinkstring	proc typeset(font: Font; text: sink string; bounds = vec2(0, 0); hAlign = LeftAlign;\n        vAlign = TopAlign; wrap = true): Arrangement		468
nim	layoutBounds	pixie/fonts.html#layoutBounds,Arrangement	proc layoutBounds(arrangement: Arrangement): Vec2		484
nim	layoutBounds	pixie/fonts.html#layoutBounds,Font,string	proc layoutBounds(font: Font; text: string): Vec2		498
nim	layoutBounds	pixie/fonts.html#layoutBounds,seq[Span]	proc layoutBounds(spans: seq[Span]): Vec2		502
nim	parseOtf	pixie/fonts.html#parseOtf,string	proc parseOtf(buf: string): Typeface		506
nim	parseTtf	pixie/fonts.html#parseTtf,string	proc parseTtf(buf: string): Typeface		510
nim	parseSvgFont	pixie/fonts.html#parseSvgFont,string	proc parseSvgFont(buf: string): Typeface		513
nim	computeBounds	pixie/fonts.html#computeBounds,Arrangement	proc computeBounds(arrangement: Arrangement; transform = mat3()): Rect		598
nim	fillText	pixie/fonts.html#fillText,Image,Arrangement	proc fillText(target: Image; arrangement: Arrangement; transform = mat3())		608
nim	fillText	pixie/fonts.html#fillText,Image,Font,sinkstring	proc fillText(target: Image; font: Font; text: sink string; transform = mat3();\n         bounds = vec2(0, 0); hAlign = LeftAlign; vAlign = TopAlign)		620
nim	strokeText	pixie/fonts.html#strokeText,Image,Arrangement,float32,seq[float32]	proc strokeText(target: Image; arrangement: Arrangement; transform = mat3();\n           strokeWidth: float32 = 1.0; lineCap = ButtCap; lineJoin = MiterJoin;\n           miterLimit = defaultMiterLimit; dashes: seq[float32] = @[])		636
nim	strokeText	pixie/fonts.html#strokeText,Image,Font,sinkstring,float32,seq[float32]	proc strokeText(target: Image; font: Font; text: sink string; transform = mat3();\n           strokeWidth: float32 = 1.0; bounds = vec2(0, 0); hAlign = LeftAlign;\n           vAlign = TopAlign; lineCap = ButtCap; lineJoin = MiterJoin;\n           miterLimit = defaultMiterLimit; dashes: seq[float32] = @[])		659
nim	readTypeface	pixie/fonts.html#readTypeface,string	proc readTypeface(filePath: string): Typeface		691
nim	readTypefaces	pixie/fonts.html#readTypefaces,string	proc readTypefaces(filePath: string): seq[Typeface]		709
nim	name	pixie/fonts.html#name,Typeface	proc name(typeface: Typeface): string		719
nim	readFont	pixie/fonts.html#readFont,string	proc readFont(filePath: string): Font		724
nimgrp	scale	pixie/fonts.html#scale-procs-all	proc		57
nimgrp	stroketext	pixie/fonts.html#strokeText-procs-all	proc		636
nimgrp	filltext	pixie/fonts.html#fillText-procs-all	proc		608
nimgrp	typeset	pixie/fonts.html#typeset-procs-all	proc		256
nimgrp	layoutbounds	pixie/fonts.html#layoutBounds-procs-all	proc		484
